//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using OrmLib;

namespace BuildWolfSandboxBiz
{
	/// <summary>
	/// Offers a way to map join paths from the table you wish to fetch,
	/// to the table whose criteria you wish to constrain.
	/// <seealso cref="DataManager"/>
	/// </summary>
	/// <remarks>
	/// This custom extended enumerator type is only used by the <see cref="DataManager"/>.
	/// </remarks>
	public class JoinPath
	{
		private JoinPath(){}
		
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.BuildsRelation Builds{ get { return new JoinPath._.BuildsRelation(new ArrayList(), "Builds"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.BuildStatusRelation BuildStatus{ get { return new JoinPath._.BuildStatusRelation(new ArrayList(), "BuildStatus"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.CommentsRelation Comments{ get { return new JoinPath._.CommentsRelation(new ArrayList(), "Comments"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.GroupsRelation Groups{ get { return new JoinPath._.GroupsRelation(new ArrayList(), "Groups"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.PlatformsRelation Platforms{ get { return new JoinPath._.PlatformsRelation(new ArrayList(), "Platforms"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.sysdiagramsRelation sysdiagrams{ get { return new JoinPath._.sysdiagramsRelation(new ArrayList(), "sysdiagrams"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.TagsRelation Tags{ get { return new JoinPath._.TagsRelation(new ArrayList(), "Tags"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.UsersRelation Users{ get { return new JoinPath._.UsersRelation(new ArrayList(), "Users"); } } 

		/// <summary>
		/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
		public class _
		{
			private _(){}


			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class BuildsRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal BuildsRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public BuildsColumns Columns { get { return new BuildsColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.BuildStatusRelation BuildStatus
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","Builds","Status", this.OrmAlias, this.OrmAlias + "_Buil1", true));
						return new JoinPath._.BuildStatusRelation( RelationList, this.OrmAlias + "_Buil1"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.UsersRelation Users
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Users","id","Builds","CreatedBy", this.OrmAlias, this.OrmAlias + "_User2", true));
						return new JoinPath._.UsersRelation( RelationList, this.OrmAlias + "_User2"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class BuildStatusRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal BuildStatusRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public BuildStatusColumns Columns { get { return new BuildStatusColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.BuildsRelation Builds
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","Builds","Status", this.OrmAlias, this.OrmAlias + "_Buil1", false));
						return new JoinPath._.BuildsRelation( RelationList, this.OrmAlias + "_Buil1"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class CommentsRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal CommentsRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public CommentsColumns Columns { get { return new CommentsColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.UsersRelation Users
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Users","id","Comments","AuthorUserID", this.OrmAlias, this.OrmAlias + "_User3", true));
						return new JoinPath._.UsersRelation( RelationList, this.OrmAlias + "_User3"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class GroupsRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal GroupsRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public GroupsColumns Columns { get { return new GroupsColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.TagsRelation Tags
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Tags","GroupsAllowedToSet", this.OrmAlias, this.OrmAlias + "_Tags4", false));
						return new JoinPath._.TagsRelation( RelationList, this.OrmAlias + "_Tags4"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.UsersRelation Users
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Users","GroupID", this.OrmAlias, this.OrmAlias + "_User5", false));
						return new JoinPath._.UsersRelation( RelationList, this.OrmAlias + "_User5"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class PlatformsRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal PlatformsRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public PlatformsColumns Columns { get { return new PlatformsColumns(RelationList, this.OrmAlias); } } 



			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class sysdiagramsRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal sysdiagramsRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public sysdiagramsColumns Columns { get { return new sysdiagramsColumns(RelationList, this.OrmAlias); } } 



			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class TagsRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal TagsRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public TagsColumns Columns { get { return new TagsColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.GroupsRelation Groups
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Tags","GroupsAllowedToSet", this.OrmAlias, this.OrmAlias + "_Grou4", true));
						return new JoinPath._.GroupsRelation( RelationList, this.OrmAlias + "_Grou4"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class UsersRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal UsersRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public UsersColumns Columns { get { return new UsersColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.BuildsRelation Builds
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Users","id","Builds","CreatedBy", this.OrmAlias, this.OrmAlias + "_Buil2", false));
						return new JoinPath._.BuildsRelation( RelationList, this.OrmAlias + "_Buil2"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.CommentsRelation Comments
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Users","id","Comments","AuthorUserID", this.OrmAlias, this.OrmAlias + "_Comm3", false));
						return new JoinPath._.CommentsRelation( RelationList, this.OrmAlias + "_Comm3"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.GroupsRelation Groups
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Users","GroupID", this.OrmAlias, this.OrmAlias + "_Grou5", true));
						return new JoinPath._.GroupsRelation( RelationList, this.OrmAlias + "_Grou5"); 
					}
				}

				

			}
			
		

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class BuildsColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal BuildsColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Builds","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the Status
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation Status
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Builds","Status","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the CreationDate
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation CreationDate
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Builds","CreationDate","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the CreatedBy
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation CreatedBy
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Builds","CreatedBy","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the CreatedByComputerName
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation CreatedByComputerName
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Builds","CreatedByComputerName","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the CreatorsLocalBranchRoot
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation CreatorsLocalBranchRoot
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Builds","CreatorsLocalBranchRoot","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class BuildStatusColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal BuildStatusColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the StatusName
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation StatusName
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("BuildStatus","StatusName","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the StatusDescription
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation StatusDescription
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("BuildStatus","StatusDescription","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class CommentsColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal CommentsColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Comments","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the CommentText
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation CommentText
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Comments","CommentText","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the CommentTime
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation CommentTime
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Comments","CommentTime","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the AuthorUserID
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation AuthorUserID
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Comments","AuthorUserID","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class GroupsColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal GroupsColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Groups","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the GroupName
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation GroupName
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Groups","GroupName","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class PlatformsColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal PlatformsColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Platforms","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the PlatformName
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation PlatformName
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Platforms","PlatformName","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class sysdiagramsColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal sysdiagramsColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the name
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation name
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","name","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the principal_id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation principal_id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","principal_id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the diagram_id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation diagram_id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","diagram_id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the version
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation version
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","version","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the definition
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation definition
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","definition","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class TagsColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal TagsColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Tags","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the GroupsAllowedToSet
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation GroupsAllowedToSet
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Tags","GroupsAllowedToSet","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the TagName
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation TagName
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Tags","TagName","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the TagDescription
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation TagDescription
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Tags","TagDescription","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class UsersColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal UsersColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Users","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the WindowsLoginName
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation WindowsLoginName
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Users","WindowsLoginName","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the GroupID
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation GroupID
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Users","GroupID","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}


		}
	}
}
		

