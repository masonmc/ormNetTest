//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using OrmLib;

namespace BuildWolfSandboxBiz
{
	/// <summary>
	/// Specify the tables that need to be fetched.
	/// </summary>
	/// <remarks>
	/// This is a custom class type that should be used as an extended enumerator.
	/// It is designed as a tree of enumerators.
	/// It is to be used to map out the path to take through relationships to 
	/// retrieve related tables.
	/// </remarks>
	public class FetchPath
	{
		private FetchPath(){}
		
		/// <summary>
		/// Start the fetch from Builds 
		/// </summary>
		/// <remarks>
		/// The FetchPath must start at the root table being fetched.
		/// i.e the DataManager.Get&lt;TableName1&gt;() and The FetchPath.&lt;TableName1&gt;.&lt;more tables&gt;.... should match
		/// </remarks>
		public static FetchPath._.BuildsRelation Builds{ get { return new FetchPath._.BuildsRelation(new ArrayList(), "Builds"); } } 
		/// <summary>
		/// Start the fetch from BuildStatus 
		/// </summary>
		/// <remarks>
		/// The FetchPath must start at the root table being fetched.
		/// i.e the DataManager.Get&lt;TableName1&gt;() and The FetchPath.&lt;TableName1&gt;.&lt;more tables&gt;.... should match
		/// </remarks>
		public static FetchPath._.BuildStatusRelation BuildStatus{ get { return new FetchPath._.BuildStatusRelation(new ArrayList(), "BuildStatus"); } } 
		/// <summary>
		/// Start the fetch from Comments 
		/// </summary>
		/// <remarks>
		/// The FetchPath must start at the root table being fetched.
		/// i.e the DataManager.Get&lt;TableName1&gt;() and The FetchPath.&lt;TableName1&gt;.&lt;more tables&gt;.... should match
		/// </remarks>
		public static FetchPath._.CommentsRelation Comments{ get { return new FetchPath._.CommentsRelation(new ArrayList(), "Comments"); } } 
		/// <summary>
		/// Start the fetch from Groups 
		/// </summary>
		/// <remarks>
		/// The FetchPath must start at the root table being fetched.
		/// i.e the DataManager.Get&lt;TableName1&gt;() and The FetchPath.&lt;TableName1&gt;.&lt;more tables&gt;.... should match
		/// </remarks>
		public static FetchPath._.GroupsRelation Groups{ get { return new FetchPath._.GroupsRelation(new ArrayList(), "Groups"); } } 
		/// <summary>
		/// Start the fetch from Platforms 
		/// </summary>
		/// <remarks>
		/// The FetchPath must start at the root table being fetched.
		/// i.e the DataManager.Get&lt;TableName1&gt;() and The FetchPath.&lt;TableName1&gt;.&lt;more tables&gt;.... should match
		/// </remarks>
		public static FetchPath._.PlatformsRelation Platforms{ get { return new FetchPath._.PlatformsRelation(new ArrayList(), "Platforms"); } } 
		/// <summary>
		/// Start the fetch from sysdiagrams 
		/// </summary>
		/// <remarks>
		/// The FetchPath must start at the root table being fetched.
		/// i.e the DataManager.Get&lt;TableName1&gt;() and The FetchPath.&lt;TableName1&gt;.&lt;more tables&gt;.... should match
		/// </remarks>
		public static FetchPath._.sysdiagramsRelation sysdiagrams{ get { return new FetchPath._.sysdiagramsRelation(new ArrayList(), "sysdiagrams"); } } 
		/// <summary>
		/// Start the fetch from Tags 
		/// </summary>
		/// <remarks>
		/// The FetchPath must start at the root table being fetched.
		/// i.e the DataManager.Get&lt;TableName1&gt;() and The FetchPath.&lt;TableName1&gt;.&lt;more tables&gt;.... should match
		/// </remarks>
		public static FetchPath._.TagsRelation Tags{ get { return new FetchPath._.TagsRelation(new ArrayList(), "Tags"); } } 
		/// <summary>
		/// Start the fetch from Users 
		/// </summary>
		/// <remarks>
		/// The FetchPath must start at the root table being fetched.
		/// i.e the DataManager.Get&lt;TableName1&gt;() and The FetchPath.&lt;TableName1&gt;.&lt;more tables&gt;.... should match
		/// </remarks>
		public static FetchPath._.UsersRelation Users{ get { return new FetchPath._.UsersRelation(new ArrayList(), "Users"); } } 

		/// <summary>
		/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
		public class _
		{
			private _(){}


			/// <summary>
			/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
			/// </summary>
			public class BuildsRelation : DataManagerBase.FetchPathRelation
			{			
				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
				/// </summary>
				internal BuildsRelation(ArrayList relationList, string alias) { this.RelationList = relationList; this.OrmAlias = alias;}
			
				
				/// <summary>
				/// Fetch all related children and parents
				/// </summary>
				public BuildsRelation All
				{
					get
					{
						
						
						RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","Builds","Status", this.OrmAlias, this.OrmAlias + "_Buil1", true));
						RelationList.Add(new DataManagerBase.Relation("Users","id","Builds","CreatedBy", this.OrmAlias, this.OrmAlias + "_User2", true));
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related children
				/// </summary>
				public BuildsRelation AllChildren
				{
					get
					{
						
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related parents
				/// </summary>
				public BuildsRelation AllParents
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","Builds","Status", this.OrmAlias, this.OrmAlias + "_Buil1", true));
						RelationList.Add(new DataManagerBase.Relation("Users","id","Builds","CreatedBy", this.OrmAlias, this.OrmAlias + "_User2", true));
						
						return this;
					}
				} 
				

				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.BuildStatusRelation BuildStatus
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","Builds","Status", this.OrmAlias, this.OrmAlias + "_Buil1", true ));
						return new FetchPath._.BuildStatusRelation(RelationList, this.OrmAlias + "_Buil1"); 
					}
				}

				
				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.UsersRelation Users
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Users","id","Builds","CreatedBy", this.OrmAlias, this.OrmAlias + "_User2", true ));
						return new FetchPath._.UsersRelation(RelationList, this.OrmAlias + "_User2"); 
					}
				}

				

			}
			
			/// <summary>
			/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
			/// </summary>
			public class BuildStatusRelation : DataManagerBase.FetchPathRelation
			{			
				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
				/// </summary>
				internal BuildStatusRelation(ArrayList relationList, string alias) { this.RelationList = relationList; this.OrmAlias = alias;}
			
				
				/// <summary>
				/// Fetch all related children and parents
				/// </summary>
				public BuildStatusRelation All
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","Builds","Status", this.OrmAlias, this.OrmAlias + "_Buil1", false));
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related children
				/// </summary>
				public BuildStatusRelation AllChildren
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","Builds","Status", this.OrmAlias, this.OrmAlias + "_Buil1", false));
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related parents
				/// </summary>
				public BuildStatusRelation AllParents
				{
					get
					{
						
						
						return this;
					}
				} 
				

				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.BuildsRelation Builds
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("BuildStatus","id","Builds","Status", this.OrmAlias, this.OrmAlias + "_Buil1", false ));
						return new FetchPath._.BuildsRelation(RelationList, this.OrmAlias + "_Buil1"); 
					}
				}

				

			}
			
			/// <summary>
			/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
			/// </summary>
			public class CommentsRelation : DataManagerBase.FetchPathRelation
			{			
				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
				/// </summary>
				internal CommentsRelation(ArrayList relationList, string alias) { this.RelationList = relationList; this.OrmAlias = alias;}
			
				
				/// <summary>
				/// Fetch all related children and parents
				/// </summary>
				public CommentsRelation All
				{
					get
					{
						
						
						RelationList.Add(new DataManagerBase.Relation("Users","id","Comments","AuthorUserID", this.OrmAlias, this.OrmAlias + "_User3", true));
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related children
				/// </summary>
				public CommentsRelation AllChildren
				{
					get
					{
						
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related parents
				/// </summary>
				public CommentsRelation AllParents
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("Users","id","Comments","AuthorUserID", this.OrmAlias, this.OrmAlias + "_User3", true));
						
						return this;
					}
				} 
				

				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.UsersRelation Users
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Users","id","Comments","AuthorUserID", this.OrmAlias, this.OrmAlias + "_User3", true ));
						return new FetchPath._.UsersRelation(RelationList, this.OrmAlias + "_User3"); 
					}
				}

				

			}
			
			/// <summary>
			/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
			/// </summary>
			public class GroupsRelation : DataManagerBase.FetchPathRelation
			{			
				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
				/// </summary>
				internal GroupsRelation(ArrayList relationList, string alias) { this.RelationList = relationList; this.OrmAlias = alias;}
			
				
				/// <summary>
				/// Fetch all related children and parents
				/// </summary>
				public GroupsRelation All
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Tags","GroupsAllowedToSet", this.OrmAlias, this.OrmAlias + "_Tags4", false));
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Users","GroupID", this.OrmAlias, this.OrmAlias + "_User5", false));
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related children
				/// </summary>
				public GroupsRelation AllChildren
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Tags","GroupsAllowedToSet", this.OrmAlias, this.OrmAlias + "_Tags4", false));
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Users","GroupID", this.OrmAlias, this.OrmAlias + "_User5", false));
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related parents
				/// </summary>
				public GroupsRelation AllParents
				{
					get
					{
						
						
						return this;
					}
				} 
				

				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.TagsRelation Tags
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Tags","GroupsAllowedToSet", this.OrmAlias, this.OrmAlias + "_Tags4", false ));
						return new FetchPath._.TagsRelation(RelationList, this.OrmAlias + "_Tags4"); 
					}
				}

				
				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.UsersRelation Users
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Users","GroupID", this.OrmAlias, this.OrmAlias + "_User5", false ));
						return new FetchPath._.UsersRelation(RelationList, this.OrmAlias + "_User5"); 
					}
				}

				

			}
			
			/// <summary>
			/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
			/// </summary>
			public class PlatformsRelation : DataManagerBase.FetchPathRelation
			{			
				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
				/// </summary>
				internal PlatformsRelation(ArrayList relationList, string alias) { this.RelationList = relationList; this.OrmAlias = alias;}
			
				
				/// <summary>
				/// Fetch all related children and parents
				/// </summary>
				public PlatformsRelation All
				{
					get
					{
						
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related children
				/// </summary>
				public PlatformsRelation AllChildren
				{
					get
					{
						
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related parents
				/// </summary>
				public PlatformsRelation AllParents
				{
					get
					{
						
						
						return this;
					}
				} 
				


			}
			
			/// <summary>
			/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
			/// </summary>
			public class sysdiagramsRelation : DataManagerBase.FetchPathRelation
			{			
				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
				/// </summary>
				internal sysdiagramsRelation(ArrayList relationList, string alias) { this.RelationList = relationList; this.OrmAlias = alias;}
			
				
				/// <summary>
				/// Fetch all related children and parents
				/// </summary>
				public sysdiagramsRelation All
				{
					get
					{
						
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related children
				/// </summary>
				public sysdiagramsRelation AllChildren
				{
					get
					{
						
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related parents
				/// </summary>
				public sysdiagramsRelation AllParents
				{
					get
					{
						
						
						return this;
					}
				} 
				


			}
			
			/// <summary>
			/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
			/// </summary>
			public class TagsRelation : DataManagerBase.FetchPathRelation
			{			
				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
				/// </summary>
				internal TagsRelation(ArrayList relationList, string alias) { this.RelationList = relationList; this.OrmAlias = alias;}
			
				
				/// <summary>
				/// Fetch all related children and parents
				/// </summary>
				public TagsRelation All
				{
					get
					{
						
						
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Tags","GroupsAllowedToSet", this.OrmAlias, this.OrmAlias + "_Grou4", true));
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related children
				/// </summary>
				public TagsRelation AllChildren
				{
					get
					{
						
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related parents
				/// </summary>
				public TagsRelation AllParents
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Tags","GroupsAllowedToSet", this.OrmAlias, this.OrmAlias + "_Grou4", true));
						
						return this;
					}
				} 
				

				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.GroupsRelation Groups
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Tags","GroupsAllowedToSet", this.OrmAlias, this.OrmAlias + "_Grou4", true ));
						return new FetchPath._.GroupsRelation(RelationList, this.OrmAlias + "_Grou4"); 
					}
				}

				

			}
			
			/// <summary>
			/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
			/// </summary>
			public class UsersRelation : DataManagerBase.FetchPathRelation
			{			
				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="FetchPath"/>.
				/// </summary>
				internal UsersRelation(ArrayList relationList, string alias) { this.RelationList = relationList; this.OrmAlias = alias;}
			
				
				/// <summary>
				/// Fetch all related children and parents
				/// </summary>
				public UsersRelation All
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("Users","id","Builds","CreatedBy", this.OrmAlias, this.OrmAlias + "_Buil2", false));
						RelationList.Add(new DataManagerBase.Relation("Users","id","Comments","AuthorUserID", this.OrmAlias, this.OrmAlias + "_Comm3", false));
						
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Users","GroupID", this.OrmAlias, this.OrmAlias + "_Grou5", true));
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related children
				/// </summary>
				public UsersRelation AllChildren
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("Users","id","Builds","CreatedBy", this.OrmAlias, this.OrmAlias + "_Buil2", false));
						RelationList.Add(new DataManagerBase.Relation("Users","id","Comments","AuthorUserID", this.OrmAlias, this.OrmAlias + "_Comm3", false));
						
						return this;
					}
				} 
			
				/// <summary>
				/// Fetch all related parents
				/// </summary>
				public UsersRelation AllParents
				{
					get
					{
						
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Users","GroupID", this.OrmAlias, this.OrmAlias + "_Grou5", true));
						
						return this;
					}
				} 
				

				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.BuildsRelation Builds
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Users","id","Builds","CreatedBy", this.OrmAlias, this.OrmAlias + "_Buil2", false ));
						return new FetchPath._.BuildsRelation(RelationList, this.OrmAlias + "_Buil2"); 
					}
				}

				
				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.CommentsRelation Comments
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Users","id","Comments","AuthorUserID", this.OrmAlias, this.OrmAlias + "_Comm3", false ));
						return new FetchPath._.CommentsRelation(RelationList, this.OrmAlias + "_Comm3"); 
					}
				}

				
				/// <summary>
				/// Include this table through this relation.
				/// </summary>
				public FetchPath._.GroupsRelation Groups
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Groups","id","Users","GroupID", this.OrmAlias, this.OrmAlias + "_Grou5", true ));
						return new FetchPath._.GroupsRelation(RelationList, this.OrmAlias + "_Grou5"); 
					}
				}

				

			}
			

		}
	}
}
		

