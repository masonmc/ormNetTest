//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BuildWolfSandboxBiz
{

		/// <summary>
		///	Holds a collection of Buildss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(Builds))]
		public abstract class BuildsCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public BuildsCollectionOrmTemplate() : base(typeof(Builds)){}

			/// <summary>
			/// Gets or sets the <see cref="Builds"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public Builds this[int index]
			{
				get
				{
					return (Builds)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of Buildss</returns>
			public BuildsCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of Buildss</returns>
			public BuildsCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				BuildsCollection retCollection = new BuildsCollection();
				
				foreach( Builds _Builds in List)
				{
					if ( Match(comparer,_Builds[property] , searchValue) ) 
						retCollection.Add( _Builds );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public BuildsCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public BuildsCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (BuildsCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public Builds FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public Builds FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( Builds _Builds in List)
				{
					if ( Match(comparer,_Builds[property] , searchValue) ) 
						return _Builds;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a Builds to the collection.
			/// </summary>
			/// <param name="newBuilds">Adds a Builds to the collection</param>
			public int Add( Builds newBuilds)
			{
				return List.Add( newBuilds );
			}

		/// <summary>
		/// Find a Builds by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.id , searchValue) ) 
					return _Builds;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Builds by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Builds by the property Status.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByStatus( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByStatus( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property Status.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByStatus( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.Status , searchValue) ) 
					return _Builds;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Builds by the property Status.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByStatus( string searchValue )
		{
			return FindByStatus( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property Status.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByStatus( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByStatus( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Builds by the property CreationDate.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreationDate( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FindByCreationDate( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property CreationDate.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreationDate( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.CreationDate , searchValue) ) 
					return _Builds;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Builds by the property CreationDate.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreationDate( string searchValue )
		{
			return FindByCreationDate( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property CreationDate.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreationDate( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByCreationDate( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Builds by the property CreatedBy.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreatedBy( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByCreatedBy( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property CreatedBy.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreatedBy( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.CreatedBy , searchValue) ) 
					return _Builds;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Builds by the property CreatedBy.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreatedBy( string searchValue )
		{
			return FindByCreatedBy( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property CreatedBy.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreatedBy( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByCreatedBy( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Builds by the property CreatedByComputerName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreatedByComputerName( System.String searchValue )
		{
			return FindByCreatedByComputerName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property CreatedByComputerName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreatedByComputerName( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.CreatedByComputerName , searchValue) ) 
					return _Builds;
			}
			
			return null;
		}
		/// <summary>
		/// Find a Builds by the property CreatorsLocalBranchRoot.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreatorsLocalBranchRoot( System.String searchValue )
		{
			return FindByCreatorsLocalBranchRoot( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Builds by the property CreatorsLocalBranchRoot.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Builds if found, or null</returns>
		public	Builds	FindByCreatorsLocalBranchRoot( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.CreatorsLocalBranchRoot , searchValue) ) 
					return _Builds;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			BuildsCollection retCollection = new BuildsCollection();

			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.id , searchValue) ) 
					retCollection.Add( _Builds );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property Status.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByStatus( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByStatus( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property Status.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByStatus( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			BuildsCollection retCollection = new BuildsCollection();

			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.Status , searchValue) ) 
					retCollection.Add( _Builds );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property Status.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByStatus( string searchValue )
		{
			return FilterByStatus( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property Status.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByStatus( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByStatus( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property CreationDate.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreationDate( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FilterByCreationDate( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CreationDate.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreationDate( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			BuildsCollection retCollection = new BuildsCollection();

			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.CreationDate , searchValue) ) 
					retCollection.Add( _Builds );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property CreationDate.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreationDate( string searchValue )
		{
			return FilterByCreationDate( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CreationDate.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreationDate( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByCreationDate( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property CreatedBy.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreatedBy( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByCreatedBy( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CreatedBy.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreatedBy( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			BuildsCollection retCollection = new BuildsCollection();

			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.CreatedBy , searchValue) ) 
					retCollection.Add( _Builds );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property CreatedBy.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreatedBy( string searchValue )
		{
			return FilterByCreatedBy( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CreatedBy.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreatedBy( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByCreatedBy( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property CreatedByComputerName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreatedByComputerName( System.String searchValue )
		{
			return FilterByCreatedByComputerName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CreatedByComputerName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreatedByComputerName( System.String searchValue, OrmLib.CompareType comparer )
		{
			BuildsCollection retCollection = new BuildsCollection();

			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.CreatedByComputerName , searchValue) ) 
					retCollection.Add( _Builds );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property CreatorsLocalBranchRoot.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreatorsLocalBranchRoot( System.String searchValue )
		{
			return FilterByCreatorsLocalBranchRoot( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CreatorsLocalBranchRoot.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildsCollection of Buildss</returns>
		public	BuildsCollection	FilterByCreatorsLocalBranchRoot( System.String searchValue, OrmLib.CompareType comparer )
		{
			BuildsCollection retCollection = new BuildsCollection();

			foreach( Builds _Builds in List)
			{
				if ( Match(comparer,_Builds.CreatorsLocalBranchRoot , searchValue) ) 
					retCollection.Add( _Builds );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a Builds by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildsCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildsCollection)this;
		}

		/// <summary>
		/// Sorts a Builds by the property Status.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildsCollection	SortByStatus ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("Status"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildsCollection)this;
		}

		/// <summary>
		/// Sorts a Builds by the property CreationDate.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildsCollection	SortByCreationDate ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("CreationDate"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildsCollection)this;
		}

		/// <summary>
		/// Sorts a Builds by the property CreatedBy.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildsCollection	SortByCreatedBy ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("CreatedBy"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildsCollection)this;
		}

		/// <summary>
		/// Sorts a Builds by the property CreatedByComputerName.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildsCollection	SortByCreatedByComputerName ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("CreatedByComputerName"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildsCollection)this;
		}

		/// <summary>
		/// Sorts a Builds by the property CreatorsLocalBranchRoot.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildsCollection	SortByCreatorsLocalBranchRoot ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("CreatorsLocalBranchRoot"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildsCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of BuildStatuss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(BuildStatus))]
		public abstract class BuildStatusCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public BuildStatusCollectionOrmTemplate() : base(typeof(BuildStatus)){}

			/// <summary>
			/// Gets or sets the <see cref="BuildStatus"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public BuildStatus this[int index]
			{
				get
				{
					return (BuildStatus)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of BuildStatuss</returns>
			public BuildStatusCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of BuildStatuss</returns>
			public BuildStatusCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				BuildStatusCollection retCollection = new BuildStatusCollection();
				
				foreach( BuildStatus _BuildStatus in List)
				{
					if ( Match(comparer,_BuildStatus[property] , searchValue) ) 
						retCollection.Add( _BuildStatus );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public BuildStatusCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public BuildStatusCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (BuildStatusCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public BuildStatus FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public BuildStatus FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( BuildStatus _BuildStatus in List)
				{
					if ( Match(comparer,_BuildStatus[property] , searchValue) ) 
						return _BuildStatus;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a BuildStatus to the collection.
			/// </summary>
			/// <param name="newBuildStatus">Adds a BuildStatus to the collection</param>
			public int Add( BuildStatus newBuildStatus)
			{
				return List.Add( newBuildStatus );
			}

		/// <summary>
		/// Find a BuildStatus by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An BuildStatus if found, or null</returns>
		public	BuildStatus	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a BuildStatus by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An BuildStatus if found, or null</returns>
		public	BuildStatus	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( BuildStatus _BuildStatus in List)
			{
				if ( Match(comparer,_BuildStatus.id , searchValue) ) 
					return _BuildStatus;
			}
			
			return null;
		}


		/// <summary>
		/// Find a BuildStatus by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An BuildStatus if found, or null</returns>
		public	BuildStatus	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a BuildStatus by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An BuildStatus if found, or null</returns>
		public	BuildStatus	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a BuildStatus by the property StatusName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An BuildStatus if found, or null</returns>
		public	BuildStatus	FindByStatusName( System.String searchValue )
		{
			return FindByStatusName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a BuildStatus by the property StatusName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An BuildStatus if found, or null</returns>
		public	BuildStatus	FindByStatusName( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( BuildStatus _BuildStatus in List)
			{
				if ( Match(comparer,_BuildStatus.StatusName , searchValue) ) 
					return _BuildStatus;
			}
			
			return null;
		}
		/// <summary>
		/// Find a BuildStatus by the property StatusDescription.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An BuildStatus if found, or null</returns>
		public	BuildStatus	FindByStatusDescription( System.String searchValue )
		{
			return FindByStatusDescription( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a BuildStatus by the property StatusDescription.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An BuildStatus if found, or null</returns>
		public	BuildStatus	FindByStatusDescription( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( BuildStatus _BuildStatus in List)
			{
				if ( Match(comparer,_BuildStatus.StatusDescription , searchValue) ) 
					return _BuildStatus;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildStatusCollection of BuildStatuss</returns>
		public	BuildStatusCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildStatusCollection of BuildStatuss</returns>
		public	BuildStatusCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			BuildStatusCollection retCollection = new BuildStatusCollection();

			foreach( BuildStatus _BuildStatus in List)
			{
				if ( Match(comparer,_BuildStatus.id , searchValue) ) 
					retCollection.Add( _BuildStatus );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildStatusCollection of BuildStatuss</returns>
		public	BuildStatusCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildStatusCollection of BuildStatuss</returns>
		public	BuildStatusCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property StatusName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildStatusCollection of BuildStatuss</returns>
		public	BuildStatusCollection	FilterByStatusName( System.String searchValue )
		{
			return FilterByStatusName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property StatusName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildStatusCollection of BuildStatuss</returns>
		public	BuildStatusCollection	FilterByStatusName( System.String searchValue, OrmLib.CompareType comparer )
		{
			BuildStatusCollection retCollection = new BuildStatusCollection();

			foreach( BuildStatus _BuildStatus in List)
			{
				if ( Match(comparer,_BuildStatus.StatusName , searchValue) ) 
					retCollection.Add( _BuildStatus );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property StatusDescription.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A BuildStatusCollection of BuildStatuss</returns>
		public	BuildStatusCollection	FilterByStatusDescription( System.String searchValue )
		{
			return FilterByStatusDescription( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property StatusDescription.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A BuildStatusCollection of BuildStatuss</returns>
		public	BuildStatusCollection	FilterByStatusDescription( System.String searchValue, OrmLib.CompareType comparer )
		{
			BuildStatusCollection retCollection = new BuildStatusCollection();

			foreach( BuildStatus _BuildStatus in List)
			{
				if ( Match(comparer,_BuildStatus.StatusDescription , searchValue) ) 
					retCollection.Add( _BuildStatus );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a BuildStatus by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildStatusCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildStatusCollection)this;
		}

		/// <summary>
		/// Sorts a BuildStatus by the property StatusName.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildStatusCollection	SortByStatusName ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("StatusName"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildStatusCollection)this;
		}

		/// <summary>
		/// Sorts a BuildStatus by the property StatusDescription.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	BuildStatusCollection	SortByStatusDescription ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("StatusDescription"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (BuildStatusCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of Commentss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(Comments))]
		public abstract class CommentsCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public CommentsCollectionOrmTemplate() : base(typeof(Comments)){}

			/// <summary>
			/// Gets or sets the <see cref="Comments"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public Comments this[int index]
			{
				get
				{
					return (Comments)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of Commentss</returns>
			public CommentsCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of Commentss</returns>
			public CommentsCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				CommentsCollection retCollection = new CommentsCollection();
				
				foreach( Comments _Comments in List)
				{
					if ( Match(comparer,_Comments[property] , searchValue) ) 
						retCollection.Add( _Comments );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public CommentsCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public CommentsCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (CommentsCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public Comments FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public Comments FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( Comments _Comments in List)
				{
					if ( Match(comparer,_Comments[property] , searchValue) ) 
						return _Comments;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a Comments to the collection.
			/// </summary>
			/// <param name="newComments">Adds a Comments to the collection</param>
			public int Add( Comments newComments)
			{
				return List.Add( newComments );
			}

		/// <summary>
		/// Find a Comments by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Comments by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Comments _Comments in List)
			{
				if ( Match(comparer,_Comments.id , searchValue) ) 
					return _Comments;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Comments by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Comments by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Comments by the property CommentText.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByCommentText( System.String searchValue )
		{
			return FindByCommentText( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Comments by the property CommentText.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByCommentText( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Comments _Comments in List)
			{
				if ( Match(comparer,_Comments.CommentText , searchValue) ) 
					return _Comments;
			}
			
			return null;
		}
		/// <summary>
		/// Find a Comments by the property CommentTime.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByCommentTime( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FindByCommentTime( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Comments by the property CommentTime.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByCommentTime( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			foreach( Comments _Comments in List)
			{
				if ( Match(comparer,_Comments.CommentTime , searchValue) ) 
					return _Comments;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Comments by the property CommentTime.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByCommentTime( string searchValue )
		{
			return FindByCommentTime( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Comments by the property CommentTime.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByCommentTime( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByCommentTime( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Comments by the property AuthorUserID.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByAuthorUserID( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByAuthorUserID( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Comments by the property AuthorUserID.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByAuthorUserID( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Comments _Comments in List)
			{
				if ( Match(comparer,_Comments.AuthorUserID , searchValue) ) 
					return _Comments;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Comments by the property AuthorUserID.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByAuthorUserID( string searchValue )
		{
			return FindByAuthorUserID( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Comments by the property AuthorUserID.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Comments if found, or null</returns>
		public	Comments	FindByAuthorUserID( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByAuthorUserID( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			CommentsCollection retCollection = new CommentsCollection();

			foreach( Comments _Comments in List)
			{
				if ( Match(comparer,_Comments.id , searchValue) ) 
					retCollection.Add( _Comments );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property CommentText.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByCommentText( System.String searchValue )
		{
			return FilterByCommentText( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CommentText.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByCommentText( System.String searchValue, OrmLib.CompareType comparer )
		{
			CommentsCollection retCollection = new CommentsCollection();

			foreach( Comments _Comments in List)
			{
				if ( Match(comparer,_Comments.CommentText , searchValue) ) 
					retCollection.Add( _Comments );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property CommentTime.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByCommentTime( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FilterByCommentTime( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CommentTime.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByCommentTime( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			CommentsCollection retCollection = new CommentsCollection();

			foreach( Comments _Comments in List)
			{
				if ( Match(comparer,_Comments.CommentTime , searchValue) ) 
					retCollection.Add( _Comments );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property CommentTime.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByCommentTime( string searchValue )
		{
			return FilterByCommentTime( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property CommentTime.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByCommentTime( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByCommentTime( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property AuthorUserID.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByAuthorUserID( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByAuthorUserID( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property AuthorUserID.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByAuthorUserID( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			CommentsCollection retCollection = new CommentsCollection();

			foreach( Comments _Comments in List)
			{
				if ( Match(comparer,_Comments.AuthorUserID , searchValue) ) 
					retCollection.Add( _Comments );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property AuthorUserID.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByAuthorUserID( string searchValue )
		{
			return FilterByAuthorUserID( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property AuthorUserID.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A CommentsCollection of Commentss</returns>
		public	CommentsCollection	FilterByAuthorUserID( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByAuthorUserID( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a Comments by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	CommentsCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (CommentsCollection)this;
		}

		/// <summary>
		/// Sorts a Comments by the property CommentText.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	CommentsCollection	SortByCommentText ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("CommentText"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (CommentsCollection)this;
		}

		/// <summary>
		/// Sorts a Comments by the property CommentTime.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	CommentsCollection	SortByCommentTime ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("CommentTime"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (CommentsCollection)this;
		}

		/// <summary>
		/// Sorts a Comments by the property AuthorUserID.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	CommentsCollection	SortByAuthorUserID ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("AuthorUserID"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (CommentsCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of Groupss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(Groups))]
		public abstract class GroupsCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public GroupsCollectionOrmTemplate() : base(typeof(Groups)){}

			/// <summary>
			/// Gets or sets the <see cref="Groups"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public Groups this[int index]
			{
				get
				{
					return (Groups)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of Groupss</returns>
			public GroupsCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of Groupss</returns>
			public GroupsCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				GroupsCollection retCollection = new GroupsCollection();
				
				foreach( Groups _Groups in List)
				{
					if ( Match(comparer,_Groups[property] , searchValue) ) 
						retCollection.Add( _Groups );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public GroupsCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public GroupsCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (GroupsCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public Groups FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public Groups FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( Groups _Groups in List)
				{
					if ( Match(comparer,_Groups[property] , searchValue) ) 
						return _Groups;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a Groups to the collection.
			/// </summary>
			/// <param name="newGroups">Adds a Groups to the collection</param>
			public int Add( Groups newGroups)
			{
				return List.Add( newGroups );
			}

		/// <summary>
		/// Find a Groups by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Groups if found, or null</returns>
		public	Groups	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Groups by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Groups if found, or null</returns>
		public	Groups	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Groups _Groups in List)
			{
				if ( Match(comparer,_Groups.id , searchValue) ) 
					return _Groups;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Groups by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Groups if found, or null</returns>
		public	Groups	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Groups by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Groups if found, or null</returns>
		public	Groups	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Groups by the property GroupName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Groups if found, or null</returns>
		public	Groups	FindByGroupName( System.String searchValue )
		{
			return FindByGroupName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Groups by the property GroupName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Groups if found, or null</returns>
		public	Groups	FindByGroupName( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Groups _Groups in List)
			{
				if ( Match(comparer,_Groups.GroupName , searchValue) ) 
					return _Groups;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A GroupsCollection of Groupss</returns>
		public	GroupsCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A GroupsCollection of Groupss</returns>
		public	GroupsCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			GroupsCollection retCollection = new GroupsCollection();

			foreach( Groups _Groups in List)
			{
				if ( Match(comparer,_Groups.id , searchValue) ) 
					retCollection.Add( _Groups );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A GroupsCollection of Groupss</returns>
		public	GroupsCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A GroupsCollection of Groupss</returns>
		public	GroupsCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property GroupName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A GroupsCollection of Groupss</returns>
		public	GroupsCollection	FilterByGroupName( System.String searchValue )
		{
			return FilterByGroupName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property GroupName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A GroupsCollection of Groupss</returns>
		public	GroupsCollection	FilterByGroupName( System.String searchValue, OrmLib.CompareType comparer )
		{
			GroupsCollection retCollection = new GroupsCollection();

			foreach( Groups _Groups in List)
			{
				if ( Match(comparer,_Groups.GroupName , searchValue) ) 
					retCollection.Add( _Groups );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a Groups by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	GroupsCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (GroupsCollection)this;
		}

		/// <summary>
		/// Sorts a Groups by the property GroupName.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	GroupsCollection	SortByGroupName ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("GroupName"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (GroupsCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of Platformss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(Platforms))]
		public abstract class PlatformsCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public PlatformsCollectionOrmTemplate() : base(typeof(Platforms)){}

			/// <summary>
			/// Gets or sets the <see cref="Platforms"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public Platforms this[int index]
			{
				get
				{
					return (Platforms)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of Platformss</returns>
			public PlatformsCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of Platformss</returns>
			public PlatformsCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				PlatformsCollection retCollection = new PlatformsCollection();
				
				foreach( Platforms _Platforms in List)
				{
					if ( Match(comparer,_Platforms[property] , searchValue) ) 
						retCollection.Add( _Platforms );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public PlatformsCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public PlatformsCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (PlatformsCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public Platforms FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public Platforms FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( Platforms _Platforms in List)
				{
					if ( Match(comparer,_Platforms[property] , searchValue) ) 
						return _Platforms;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a Platforms to the collection.
			/// </summary>
			/// <param name="newPlatforms">Adds a Platforms to the collection</param>
			public int Add( Platforms newPlatforms)
			{
				return List.Add( newPlatforms );
			}

		/// <summary>
		/// Find a Platforms by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Platforms if found, or null</returns>
		public	Platforms	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Platforms by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Platforms if found, or null</returns>
		public	Platforms	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Platforms _Platforms in List)
			{
				if ( Match(comparer,_Platforms.id , searchValue) ) 
					return _Platforms;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Platforms by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Platforms if found, or null</returns>
		public	Platforms	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Platforms by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Platforms if found, or null</returns>
		public	Platforms	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Platforms by the property PlatformName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Platforms if found, or null</returns>
		public	Platforms	FindByPlatformName( System.String searchValue )
		{
			return FindByPlatformName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Platforms by the property PlatformName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Platforms if found, or null</returns>
		public	Platforms	FindByPlatformName( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Platforms _Platforms in List)
			{
				if ( Match(comparer,_Platforms.PlatformName , searchValue) ) 
					return _Platforms;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A PlatformsCollection of Platformss</returns>
		public	PlatformsCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A PlatformsCollection of Platformss</returns>
		public	PlatformsCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			PlatformsCollection retCollection = new PlatformsCollection();

			foreach( Platforms _Platforms in List)
			{
				if ( Match(comparer,_Platforms.id , searchValue) ) 
					retCollection.Add( _Platforms );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A PlatformsCollection of Platformss</returns>
		public	PlatformsCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A PlatformsCollection of Platformss</returns>
		public	PlatformsCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property PlatformName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A PlatformsCollection of Platformss</returns>
		public	PlatformsCollection	FilterByPlatformName( System.String searchValue )
		{
			return FilterByPlatformName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property PlatformName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A PlatformsCollection of Platformss</returns>
		public	PlatformsCollection	FilterByPlatformName( System.String searchValue, OrmLib.CompareType comparer )
		{
			PlatformsCollection retCollection = new PlatformsCollection();

			foreach( Platforms _Platforms in List)
			{
				if ( Match(comparer,_Platforms.PlatformName , searchValue) ) 
					retCollection.Add( _Platforms );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a Platforms by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	PlatformsCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (PlatformsCollection)this;
		}

		/// <summary>
		/// Sorts a Platforms by the property PlatformName.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	PlatformsCollection	SortByPlatformName ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("PlatformName"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (PlatformsCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of sysdiagramss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(sysdiagrams))]
		public abstract class sysdiagramsCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public sysdiagramsCollectionOrmTemplate() : base(typeof(sysdiagrams)){}

			/// <summary>
			/// Gets or sets the <see cref="sysdiagrams"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public sysdiagrams this[int index]
			{
				get
				{
					return (sysdiagrams)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of sysdiagramss</returns>
			public sysdiagramsCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of sysdiagramss</returns>
			public sysdiagramsCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				sysdiagramsCollection retCollection = new sysdiagramsCollection();
				
				foreach( sysdiagrams _sysdiagrams in List)
				{
					if ( Match(comparer,_sysdiagrams[property] , searchValue) ) 
						retCollection.Add( _sysdiagrams );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public sysdiagramsCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public sysdiagramsCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (sysdiagramsCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public sysdiagrams FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public sysdiagrams FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( sysdiagrams _sysdiagrams in List)
				{
					if ( Match(comparer,_sysdiagrams[property] , searchValue) ) 
						return _sysdiagrams;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a sysdiagrams to the collection.
			/// </summary>
			/// <param name="newsysdiagrams">Adds a sysdiagrams to the collection</param>
			public int Add( sysdiagrams newsysdiagrams)
			{
				return List.Add( newsysdiagrams );
			}

		/// <summary>
		/// Find a sysdiagrams by the property name.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByname( System.String searchValue )
		{
			return FindByname( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property name.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByname( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.name , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}
		/// <summary>
		/// Find a sysdiagrams by the property principal_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByprincipal_id( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByprincipal_id( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property principal_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByprincipal_id( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.principal_id , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}


		/// <summary>
		/// Find a sysdiagrams by the property principal_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByprincipal_id( string searchValue )
		{
			return FindByprincipal_id( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property principal_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByprincipal_id( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByprincipal_id( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a sysdiagrams by the property diagram_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydiagram_id( System.Int32 searchValue )
		{
			return FindBydiagram_id( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property diagram_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydiagram_id( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.diagram_id , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}


		/// <summary>
		/// Find a sysdiagrams by the property diagram_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydiagram_id( string searchValue )
		{
			return FindBydiagram_id( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property diagram_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydiagram_id( string searchValue, OrmLib.CompareType comparer )
		{
			return FindBydiagram_id( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a sysdiagrams by the property version.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByversion( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByversion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property version.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByversion( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.version , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}


		/// <summary>
		/// Find a sysdiagrams by the property version.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByversion( string searchValue )
		{
			return FindByversion( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property version.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByversion( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByversion( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a sysdiagrams by the property definition.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydefinition( System.Data.SqlTypes.SqlBinary searchValue )
		{
			return FindBydefinition( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property definition.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydefinition( System.Data.SqlTypes.SqlBinary searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.definition , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property name.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByname( System.String searchValue )
		{
			return FilterByname( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property name.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByname( System.String searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.name , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property principal_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByprincipal_id( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByprincipal_id( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property principal_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByprincipal_id( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.principal_id , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property principal_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByprincipal_id( string searchValue )
		{
			return FilterByprincipal_id( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property principal_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByprincipal_id( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByprincipal_id( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property diagram_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydiagram_id( System.Int32 searchValue )
		{
			return FilterBydiagram_id( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property diagram_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydiagram_id( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.diagram_id , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property diagram_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydiagram_id( string searchValue )
		{
			return FilterBydiagram_id( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property diagram_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydiagram_id( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterBydiagram_id( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property version.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByversion( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByversion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property version.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByversion( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.version , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property version.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByversion( string searchValue )
		{
			return FilterByversion( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property version.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByversion( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByversion( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property definition.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydefinition( System.Data.SqlTypes.SqlBinary searchValue )
		{
			return FilterBydefinition( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property definition.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydefinition( System.Data.SqlTypes.SqlBinary searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.definition , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a sysdiagrams by the property name.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortByname ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("name"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}

		/// <summary>
		/// Sorts a sysdiagrams by the property principal_id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortByprincipal_id ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("principal_id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}

		/// <summary>
		/// Sorts a sysdiagrams by the property diagram_id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortBydiagram_id ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("diagram_id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}

		/// <summary>
		/// Sorts a sysdiagrams by the property version.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortByversion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("version"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}

		/// <summary>
		/// Sorts a sysdiagrams by the property definition.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortBydefinition ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("definition"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of Tagss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(Tags))]
		public abstract class TagsCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public TagsCollectionOrmTemplate() : base(typeof(Tags)){}

			/// <summary>
			/// Gets or sets the <see cref="Tags"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public Tags this[int index]
			{
				get
				{
					return (Tags)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of Tagss</returns>
			public TagsCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of Tagss</returns>
			public TagsCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				TagsCollection retCollection = new TagsCollection();
				
				foreach( Tags _Tags in List)
				{
					if ( Match(comparer,_Tags[property] , searchValue) ) 
						retCollection.Add( _Tags );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public TagsCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public TagsCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (TagsCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public Tags FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public Tags FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( Tags _Tags in List)
				{
					if ( Match(comparer,_Tags[property] , searchValue) ) 
						return _Tags;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a Tags to the collection.
			/// </summary>
			/// <param name="newTags">Adds a Tags to the collection</param>
			public int Add( Tags newTags)
			{
				return List.Add( newTags );
			}

		/// <summary>
		/// Find a Tags by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByid( System.String searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Tags by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByid( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Tags _Tags in List)
			{
				if ( Match(comparer,_Tags.id , searchValue) ) 
					return _Tags;
			}
			
			return null;
		}
		/// <summary>
		/// Find a Tags by the property GroupsAllowedToSet.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByGroupsAllowedToSet( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByGroupsAllowedToSet( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Tags by the property GroupsAllowedToSet.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByGroupsAllowedToSet( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Tags _Tags in List)
			{
				if ( Match(comparer,_Tags.GroupsAllowedToSet , searchValue) ) 
					return _Tags;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Tags by the property GroupsAllowedToSet.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByGroupsAllowedToSet( string searchValue )
		{
			return FindByGroupsAllowedToSet( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Tags by the property GroupsAllowedToSet.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByGroupsAllowedToSet( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByGroupsAllowedToSet( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Tags by the property TagName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByTagName( System.String searchValue )
		{
			return FindByTagName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Tags by the property TagName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByTagName( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Tags _Tags in List)
			{
				if ( Match(comparer,_Tags.TagName , searchValue) ) 
					return _Tags;
			}
			
			return null;
		}
		/// <summary>
		/// Find a Tags by the property TagDescription.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByTagDescription( System.String searchValue )
		{
			return FindByTagDescription( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Tags by the property TagDescription.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Tags if found, or null</returns>
		public	Tags	FindByTagDescription( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Tags _Tags in List)
			{
				if ( Match(comparer,_Tags.TagDescription , searchValue) ) 
					return _Tags;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByid( System.String searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByid( System.String searchValue, OrmLib.CompareType comparer )
		{
			TagsCollection retCollection = new TagsCollection();

			foreach( Tags _Tags in List)
			{
				if ( Match(comparer,_Tags.id , searchValue) ) 
					retCollection.Add( _Tags );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property GroupsAllowedToSet.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByGroupsAllowedToSet( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByGroupsAllowedToSet( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property GroupsAllowedToSet.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByGroupsAllowedToSet( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			TagsCollection retCollection = new TagsCollection();

			foreach( Tags _Tags in List)
			{
				if ( Match(comparer,_Tags.GroupsAllowedToSet , searchValue) ) 
					retCollection.Add( _Tags );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property GroupsAllowedToSet.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByGroupsAllowedToSet( string searchValue )
		{
			return FilterByGroupsAllowedToSet( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property GroupsAllowedToSet.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByGroupsAllowedToSet( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByGroupsAllowedToSet( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property TagName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByTagName( System.String searchValue )
		{
			return FilterByTagName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property TagName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByTagName( System.String searchValue, OrmLib.CompareType comparer )
		{
			TagsCollection retCollection = new TagsCollection();

			foreach( Tags _Tags in List)
			{
				if ( Match(comparer,_Tags.TagName , searchValue) ) 
					retCollection.Add( _Tags );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property TagDescription.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByTagDescription( System.String searchValue )
		{
			return FilterByTagDescription( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property TagDescription.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A TagsCollection of Tagss</returns>
		public	TagsCollection	FilterByTagDescription( System.String searchValue, OrmLib.CompareType comparer )
		{
			TagsCollection retCollection = new TagsCollection();

			foreach( Tags _Tags in List)
			{
				if ( Match(comparer,_Tags.TagDescription , searchValue) ) 
					retCollection.Add( _Tags );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a Tags by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	TagsCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (TagsCollection)this;
		}

		/// <summary>
		/// Sorts a Tags by the property GroupsAllowedToSet.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	TagsCollection	SortByGroupsAllowedToSet ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("GroupsAllowedToSet"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (TagsCollection)this;
		}

		/// <summary>
		/// Sorts a Tags by the property TagName.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	TagsCollection	SortByTagName ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("TagName"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (TagsCollection)this;
		}

		/// <summary>
		/// Sorts a Tags by the property TagDescription.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	TagsCollection	SortByTagDescription ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("TagDescription"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (TagsCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of Userss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(Users))]
		public abstract class UsersCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public UsersCollectionOrmTemplate() : base(typeof(Users)){}

			/// <summary>
			/// Gets or sets the <see cref="Users"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public Users this[int index]
			{
				get
				{
					return (Users)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of Userss</returns>
			public UsersCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of Userss</returns>
			public UsersCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				UsersCollection retCollection = new UsersCollection();
				
				foreach( Users _Users in List)
				{
					if ( Match(comparer,_Users[property] , searchValue) ) 
						retCollection.Add( _Users );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public UsersCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public UsersCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (UsersCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public Users FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public Users FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( Users _Users in List)
				{
					if ( Match(comparer,_Users[property] , searchValue) ) 
						return _Users;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a Users to the collection.
			/// </summary>
			/// <param name="newUsers">Adds a Users to the collection</param>
			public int Add( Users newUsers)
			{
				return List.Add( newUsers );
			}

		/// <summary>
		/// Find a Users by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Users by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Users _Users in List)
			{
				if ( Match(comparer,_Users.id , searchValue) ) 
					return _Users;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Users by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Users by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Users by the property WindowsLoginName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByWindowsLoginName( System.String searchValue )
		{
			return FindByWindowsLoginName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Users by the property WindowsLoginName.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByWindowsLoginName( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Users _Users in List)
			{
				if ( Match(comparer,_Users.WindowsLoginName , searchValue) ) 
					return _Users;
			}
			
			return null;
		}
		/// <summary>
		/// Find a Users by the property GroupID.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByGroupID( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByGroupID( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Users by the property GroupID.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByGroupID( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Users _Users in List)
			{
				if ( Match(comparer,_Users.GroupID , searchValue) ) 
					return _Users;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Users by the property GroupID.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByGroupID( string searchValue )
		{
			return FindByGroupID( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Users by the property GroupID.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Users if found, or null</returns>
		public	Users	FindByGroupID( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByGroupID( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			UsersCollection retCollection = new UsersCollection();

			foreach( Users _Users in List)
			{
				if ( Match(comparer,_Users.id , searchValue) ) 
					retCollection.Add( _Users );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property WindowsLoginName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByWindowsLoginName( System.String searchValue )
		{
			return FilterByWindowsLoginName( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property WindowsLoginName.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByWindowsLoginName( System.String searchValue, OrmLib.CompareType comparer )
		{
			UsersCollection retCollection = new UsersCollection();

			foreach( Users _Users in List)
			{
				if ( Match(comparer,_Users.WindowsLoginName , searchValue) ) 
					retCollection.Add( _Users );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property GroupID.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByGroupID( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByGroupID( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property GroupID.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByGroupID( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			UsersCollection retCollection = new UsersCollection();

			foreach( Users _Users in List)
			{
				if ( Match(comparer,_Users.GroupID , searchValue) ) 
					retCollection.Add( _Users );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property GroupID.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByGroupID( string searchValue )
		{
			return FilterByGroupID( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property GroupID.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsersCollection of Userss</returns>
		public	UsersCollection	FilterByGroupID( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByGroupID( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a Users by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	UsersCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (UsersCollection)this;
		}

		/// <summary>
		/// Sorts a Users by the property WindowsLoginName.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	UsersCollection	SortByWindowsLoginName ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("WindowsLoginName"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (UsersCollection)this;
		}

		/// <summary>
		/// Sorts a Users by the property GroupID.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	UsersCollection	SortByGroupID ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("GroupID"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (UsersCollection)this;
		}


		}




}