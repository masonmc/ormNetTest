//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlTypes;

namespace BuildWolfSandboxBiz
{
	/// <summary>
	/// Wraps DataSet, creating all Tables, Columns, Constraints and Relations
	/// </summary>
	public class OrmDataSet
	{
		private OrmDataSet(){}

		/// <summary>
		/// Creates a DataSet with representing the databases schema
		/// </summary>
		/// <returns></returns>
		public static DataSet NewDataSet()
		{
			DataSet ds = new DataSet("OrmDataSet");

			try
			{
				InitDb(ds);
				ds.EnforceConstraints = true;
				ds.CaseSensitive = false;
			}
			catch(Exception ex)
			{
				throw new Exception("An invalid DataSet was detected.", ex);
			}

			return ds;
		}
		
		private static void InitDb(DataSet ds)
		{
			
			DataTable BuildsTable = ds.Tables.Add("Builds");
			BuildsTable.Columns.Add("id", typeof(System.Int32));
			BuildsTable.Columns["id"].AllowDBNull = false;
			BuildsTable.Columns["id"].ReadOnly = false;
			BuildsTable.Columns.Add("Status", typeof(System.Int32));
			BuildsTable.Columns["Status"].AllowDBNull = false;
			BuildsTable.Columns["Status"].ReadOnly = false;
			BuildsTable.Columns.Add("CreationDate", typeof(System.DateTime));
			BuildsTable.Columns["CreationDate"].AllowDBNull = false;
			BuildsTable.Columns["CreationDate"].ReadOnly = false;
			BuildsTable.Columns.Add("CreatedBy", typeof(System.Int32));
			BuildsTable.Columns["CreatedBy"].AllowDBNull = false;
			BuildsTable.Columns["CreatedBy"].ReadOnly = false;
			BuildsTable.Columns.Add("CreatedByComputerName", typeof(System.String));
			BuildsTable.Columns["CreatedByComputerName"].AllowDBNull = false;
			BuildsTable.Columns["CreatedByComputerName"].ReadOnly = false;
			BuildsTable.Columns["CreatedByComputerName"].MaxLength = 256;

			BuildsTable.Columns.Add("CreatorsLocalBranchRoot", typeof(System.String));
			BuildsTable.Columns["CreatorsLocalBranchRoot"].AllowDBNull = false;
			BuildsTable.Columns["CreatorsLocalBranchRoot"].ReadOnly = false;
			BuildsTable.PrimaryKey = new DataColumn[]{BuildsTable.Columns["id"]};
			
			DataTable BuildStatusTable = ds.Tables.Add("BuildStatus");
			BuildStatusTable.Columns.Add("id", typeof(System.Int32));
			BuildStatusTable.Columns["id"].AllowDBNull = false;
			BuildStatusTable.Columns["id"].ReadOnly = false;
			BuildStatusTable.Columns.Add("StatusName", typeof(System.String));
			BuildStatusTable.Columns["StatusName"].AllowDBNull = false;
			BuildStatusTable.Columns["StatusName"].ReadOnly = false;
			BuildStatusTable.Columns["StatusName"].MaxLength = 50;

			BuildStatusTable.Columns.Add("StatusDescription", typeof(System.String));
			BuildStatusTable.Columns["StatusDescription"].AllowDBNull = true;
			BuildStatusTable.Columns["StatusDescription"].ReadOnly = false;
			BuildStatusTable.Columns["StatusDescription"].MaxLength = 20;

			BuildStatusTable.PrimaryKey = new DataColumn[]{BuildStatusTable.Columns["id"]};
			
			DataTable CommentsTable = ds.Tables.Add("Comments");
			CommentsTable.Columns.Add("id", typeof(System.Int32));
			CommentsTable.Columns["id"].AllowDBNull = false;
			CommentsTable.Columns["id"].ReadOnly = false;
			CommentsTable.Columns.Add("CommentText", typeof(System.String));
			CommentsTable.Columns["CommentText"].AllowDBNull = true;
			CommentsTable.Columns["CommentText"].ReadOnly = false;
			CommentsTable.Columns.Add("CommentTime", typeof(System.DateTime));
			CommentsTable.Columns["CommentTime"].AllowDBNull = false;
			CommentsTable.Columns["CommentTime"].ReadOnly = false;
			CommentsTable.Columns.Add("AuthorUserID", typeof(System.Int32));
			CommentsTable.Columns["AuthorUserID"].AllowDBNull = true;
			CommentsTable.Columns["AuthorUserID"].ReadOnly = false;
			CommentsTable.PrimaryKey = new DataColumn[]{CommentsTable.Columns["id"]};
			
			DataTable GroupsTable = ds.Tables.Add("Groups");
			GroupsTable.Columns.Add("id", typeof(System.Int32));
			GroupsTable.Columns["id"].AllowDBNull = false;
			GroupsTable.Columns["id"].ReadOnly = false;
			GroupsTable.Columns.Add("GroupName", typeof(System.String));
			GroupsTable.Columns["GroupName"].AllowDBNull = false;
			GroupsTable.Columns["GroupName"].ReadOnly = false;
			GroupsTable.PrimaryKey = new DataColumn[]{GroupsTable.Columns["id"]};
			
			DataTable PlatformsTable = ds.Tables.Add("Platforms");
			PlatformsTable.Columns.Add("id", typeof(System.Int32));
			PlatformsTable.Columns["id"].AllowDBNull = false;
			PlatformsTable.Columns["id"].ReadOnly = false;
			PlatformsTable.Columns.Add("PlatformName", typeof(System.String));
			PlatformsTable.Columns["PlatformName"].AllowDBNull = true;
			PlatformsTable.Columns["PlatformName"].ReadOnly = false;
			PlatformsTable.Columns["PlatformName"].MaxLength = 20;

			PlatformsTable.PrimaryKey = new DataColumn[]{PlatformsTable.Columns["id"]};
			
			DataTable sysdiagramsTable = ds.Tables.Add("sysdiagrams");
			sysdiagramsTable.Columns.Add("name", typeof(System.String));
			sysdiagramsTable.Columns["name"].AllowDBNull = false;
			sysdiagramsTable.Columns["name"].ReadOnly = false;
			sysdiagramsTable.Columns["name"].MaxLength = 256;

			sysdiagramsTable.Columns.Add("principal_id", typeof(System.Int32));
			sysdiagramsTable.Columns["principal_id"].AllowDBNull = false;
			sysdiagramsTable.Columns["principal_id"].ReadOnly = false;
			sysdiagramsTable.Columns.Add("diagram_id", typeof(System.Int32));
			sysdiagramsTable.Columns["diagram_id"].AllowDBNull = false;
			sysdiagramsTable.Columns["diagram_id"].ReadOnly = false;
			sysdiagramsTable.Columns.Add("version", typeof(System.Int32));
			sysdiagramsTable.Columns["version"].AllowDBNull = true;
			sysdiagramsTable.Columns["version"].ReadOnly = false;
			sysdiagramsTable.Columns.Add("definition", typeof(System.Byte[]));
			sysdiagramsTable.Columns["definition"].AllowDBNull = true;
			sysdiagramsTable.Columns["definition"].ReadOnly = false;
			sysdiagramsTable.PrimaryKey = new DataColumn[]{sysdiagramsTable.Columns["diagram_id"]};
			
			DataTable TagsTable = ds.Tables.Add("Tags");
			TagsTable.Columns.Add("id", typeof(System.String));
			TagsTable.Columns["id"].AllowDBNull = false;
			TagsTable.Columns["id"].ReadOnly = false;
			TagsTable.Columns["id"].MaxLength = 50;

			TagsTable.Columns.Add("GroupsAllowedToSet", typeof(System.Int32));
			TagsTable.Columns["GroupsAllowedToSet"].AllowDBNull = true;
			TagsTable.Columns["GroupsAllowedToSet"].ReadOnly = false;
			TagsTable.Columns.Add("TagName", typeof(System.String));
			TagsTable.Columns["TagName"].AllowDBNull = false;
			TagsTable.Columns["TagName"].ReadOnly = false;
			TagsTable.Columns["TagName"].MaxLength = 256;

			TagsTable.Columns.Add("TagDescription", typeof(System.String));
			TagsTable.Columns["TagDescription"].AllowDBNull = true;
			TagsTable.Columns["TagDescription"].ReadOnly = false;
			TagsTable.PrimaryKey = new DataColumn[]{TagsTable.Columns["id"]};
			
			DataTable UsersTable = ds.Tables.Add("Users");
			UsersTable.Columns.Add("id", typeof(System.Int32));
			UsersTable.Columns["id"].AllowDBNull = false;
			UsersTable.Columns["id"].ReadOnly = false;
			UsersTable.Columns.Add("WindowsLoginName", typeof(System.String));
			UsersTable.Columns["WindowsLoginName"].AllowDBNull = false;
			UsersTable.Columns["WindowsLoginName"].ReadOnly = false;
			UsersTable.Columns.Add("GroupID", typeof(System.Int32));
			UsersTable.Columns["GroupID"].AllowDBNull = true;
			UsersTable.Columns["GroupID"].ReadOnly = false;
			UsersTable.PrimaryKey = new DataColumn[]{UsersTable.Columns["id"]};

			ds.Relations.Add("StatusBuilds",
				new DataColumn[]{ds.Tables["BuildStatus"].Columns["id"]},
				new DataColumn[]{ds.Tables["Builds"].Columns["Status"]},true);
			ds.Relations["StatusBuilds"].ChildKeyConstraint.DeleteRule = Rule.None;
			ds.Relations["StatusBuilds"].ChildKeyConstraint.UpdateRule = Rule.None;


			ds.Relations.Add("CreatedByBuilds",
				new DataColumn[]{ds.Tables["Users"].Columns["id"]},
				new DataColumn[]{ds.Tables["Builds"].Columns["CreatedBy"]},true);
			ds.Relations["CreatedByBuilds"].ChildKeyConstraint.DeleteRule = Rule.None;
			ds.Relations["CreatedByBuilds"].ChildKeyConstraint.UpdateRule = Rule.None;


			ds.Relations.Add("AuthorUserIDComments",
				new DataColumn[]{ds.Tables["Users"].Columns["id"]},
				new DataColumn[]{ds.Tables["Comments"].Columns["AuthorUserID"]},true);
			ds.Relations["AuthorUserIDComments"].ChildKeyConstraint.DeleteRule = Rule.None;
			ds.Relations["AuthorUserIDComments"].ChildKeyConstraint.UpdateRule = Rule.None;


			ds.Relations.Add("GroupsAllowedToSetTags",
				new DataColumn[]{ds.Tables["Groups"].Columns["id"]},
				new DataColumn[]{ds.Tables["Tags"].Columns["GroupsAllowedToSet"]},true);
			ds.Relations["GroupsAllowedToSetTags"].ChildKeyConstraint.DeleteRule = Rule.None;
			ds.Relations["GroupsAllowedToSetTags"].ChildKeyConstraint.UpdateRule = Rule.None;


			ds.Relations.Add("GroupIDUsers",
				new DataColumn[]{ds.Tables["Groups"].Columns["id"]},
				new DataColumn[]{ds.Tables["Users"].Columns["GroupID"]},true);
			ds.Relations["GroupIDUsers"].ChildKeyConstraint.DeleteRule = Rule.None;
			ds.Relations["GroupIDUsers"].ChildKeyConstraint.UpdateRule = Rule.None;


		}
	}
}
		
		